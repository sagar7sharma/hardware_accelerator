--------------------------------------
HARDWARE ACCELLERATOR FOR KNN MATCHING
--------------------------------------

Description -We introduce a typical problem of image recognition between two images with k-Nearest Neighbors (kNN) matching running under the facility of KAZE features extracted from the given images.

Tools Used - Vivado 2014.4, Vivado HLS 2014.4 and Xilinx SDK 2014.4

Steps for the Project from scratch -
1 - Open and create new project (Project_1).
2 - Create block Design.
3 - Add IP's ZYNQ7 Processing system, AXI GPIO, Processor system reset, AXI Interconnect.
4 - Run connection automation.
5 - Using the Vivado HLS, convert the C code to VHDL.
6 - HLS Creates four modules (distip_V1_0.vhd, distip_V1_0_S00_AXI.vhd, buffunct.vhd, buffunct_dsqrt_64ns_31.vhd,buffunct_mul_32s_32s_32_6.vhd)
7 - Create new custom IP from the current base project. 
8 - Include the source files(.vhd generated by HLS) and instantiate them accordingly.
9 - Include the .tcl files and Package the IP (distip_v1_0.vhd).
10- Import the custom IP to the current base project and run automation. 
11- Run Synthesis.
12- Run Implementation. 
13- Generate Bitstream.
14- Export hardware, in case of error (Set PROJECT_NAME "my project"), (Set TOP_LEVEL "toplevel").
15- Launch SDK.
16- Create new application project, modify BSP settings and include the 'xilffs' library for file read and write. Select C/C++ build setting => under linker, select libraries=> add 'm' for including math.h to support sqrt() module.  
17- In the sources, edit the helloworld.c code as given the files. 
18- Build the project.
19- Program FPGA using 'design_1_wrapper_hw_platform_0' wrapper.
20- Run the application project. 
21- Check the output in the terminal. 

To load a existing project (project_1) -
1 - Load the project_1.xpr using Vivado 2014.4.
2 - Export Hardware for SDK.
3 - Launch SDK.
4 - Right click on the _bsp to modify the BSP setting and include the 'xilffs' library for file read/write. 
5 - Select C/C++ build setting => under linker, select libraries=> add 'm' for including math.h to support sqrt() module.  
6 - Program FPGA using 'design_1_wrapper_hw_platform_0' wrapper.
7 - Run the application project.
8 - Check the output on the terminal.

Project Files - 

1) project_1.xpr - Final image of the project. 
2) Modules for Custom IP (distip) - (distip_V1_0.vhd, distip_V1_0_S00_AXI.vhd, buffunct.vhd, buffunct_dsqrt_64ns_31.vhd,buffunct_mul_32s_32s_32_6.vhd)
3) helloworld.c - Final C code Utilizing the hardware.
4) design_1.dcp - Final Block Design.
5) design_1_wrapper_hw_platform_0 - Hardware wrapper used for programming FPGA. 