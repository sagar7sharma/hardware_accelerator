/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */


#include <stdio.h>
#include <unistd.h>
#include "platform.h"
#include "xparameters.h"  // Zynq parameters
#include "xgpiops.h"      // Zynq GPIO operations

#include "ff.h"		/* Declarations of FatFs API */

FATFS FatFs;		/* FatFs work area needed for each volume */
FRESULT fr;			/* FatFs function common result code */
FIL fsrc;			/* File object needed for source file */
FIL fdst;			/* File object needed for destination file */
XGpioPs Gpio;

int main (void)
{
	UINT br, bw;		/* File read/write count */
	int retval;			/* Return value for Gpio functions */
	BYTE line[4096]; 		/* Line buffer */

	init_platform();

	// Lookup GPIO config table
	XGpioPs_Config * ConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);

	// Initialize GPIO
    if ( (retval = XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr)) != XST_SUCCESS) {
   		printf("Error initalizing GPIO fails\n"); return retval;}
	if ( (retval = XGpioPs_SelfTest(&Gpio)) != XST_SUCCESS) {
		printf("GPIO Self test fails\n"); return 1; }

	/*
	 *  Write files to SDC using FatFs SPI protocol
	 */

	f_mount(0,&FatFs);		/* Give a work area to the default drive */

	/* Open or create a file to write */
		if (f_open(&fdst, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
		{
			f_write(&fdst, "It works!\r\n", 11, &bw);	/* Write data to the file */
			f_close(&fdst);								/* Close the file */
		}

	/* Check result */
		if(bw == 11) // how many bytes written?
					printf("File written successfully\n");
				else
					printf("File write error\n");

	/* Open a file to read and open or create a file to write what was read */
	if ((f_open(&fsrc, "testfile.txt", FA_READ | FA_OPEN_EXISTING ) == FR_OK) &
			(f_open(&fdst, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK))
	{
		for (;;)
		{
			fr = f_read(&fsrc, line, sizeof line, &br); /* Read a chunk of source file */
			if (fr || br == 0)
				break; 									/* error or EOF */
			fr = f_write(&fdst, line, br, &bw);         /* Write it to the destination file */
			if (fr || bw < br)
				break; 									/* error or disk full */
		}
		/* Close the files */
		f_close(&fsrc);
		f_close(&fdst);
	}

	/* Check result */
	if(bw >= br)
		printf("File written successfully\n");
	else
		printf("File write error\n");

	exit(1);

}
