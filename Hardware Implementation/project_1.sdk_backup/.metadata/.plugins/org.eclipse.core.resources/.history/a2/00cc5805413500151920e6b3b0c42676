#include "distip.h"
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>
#include <xbasic_types.h>
#include "platform.h"
#include "xparameters.h"  // Zynq parameters
#include "xgpiops.h"      // Zynq GPIO operations
#include <math.h>
#include <time.h>
#include <stdlib.h>
#include "platform.h"
#include "ff.h"   /* Declarations of FatFs API */
#define ARRAYSIZE(x)  (sizeof(x)/sizeof(*(x)))

FATFS FatFs;    /* FatFs work area needed for each volume */
FRESULT fr;     /* FatFs function common result code */
FIL fsrc11,fsrc22;     /* File object needed for source file */
FIL fdst;     /* File object needed for destination file */
XGpioPs Gpio;

Xuint32 *baseaddr_p = (Xuint32 *)XPAR_DISTIP_0_S00_AXI_BASEADDR;
//Xuint32 *baseaddr_q = (Xuint32 *)(0x40 + 0x43C00000) ;
Xuint32 *baseaddr_q = (Xuint32 *) XPAR_DISTIP_0_S00_AXI_BASEADDR + 0x40;

int main (void)
{
  UINT br, bw;    /* File read/write count */
  int retval;     /* Return value for Gpio functions */
  BYTE line[4096];    /* Line buffer */
  char lines[2048]; //line buffer for fgets

  init_platform();

  // Lookup GPIO config table
  XGpioPs_Config * ConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);

  // Initialize GPIO
    if ( (retval = XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr)) != XST_SUCCESS) {
      printf("Error initializing GPIO fails\n"); return retval;}
  if ( (retval = XGpioPs_SelfTest(&Gpio)) != XST_SUCCESS) {
    printf("GPIO Self test fails\n"); return 1; }

  /*
   *  Write files to SDC using FatFs SPI protocol
   */

  f_mount(0,&FatFs);    /* Give a work area to the default drive */
  int i, j, k;
  char buffer11[8192], buffer22[8192], *ptr11, *ptr22;
  /* Open a file to read and open or create a file to write what was read */
  if ((f_open(&fsrc11, "desc11.txt", FA_READ | FA_OPEN_EXISTING ) == FR_OK) &&
    (f_open(&fsrc22, "desc22.txt", FA_READ | FA_OPEN_EXISTING ) == FR_OK) &&
      (f_open(&fdst, "output.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK))
  {
    FILE *file11 = fopen("desc11.txt", "r");
    FILE *file22 = fopen("desc22.txt", "r");
    for ( i = 0; i < sizeof buffer11; ++i ) {
    	fgets(buffer11, sizeof buffer11, file11);
      for ( j = 0; j < sizeof buffer22; ++j )
      { fgets(buffer22, sizeof buffer22, file22);
         /*
          * Parse the comma-separated values from each line into 'array'.
          */
    	  *(baseaddr_p+129) = 0x40000000;
         for ( k = 0, ptr11 = buffer11, ptr22 = buffer22; k < 64 /*j < 64 ARRAYSIZE(buffer11) (sizeof(buffer11)/sizeof(*buffer11))*/; ++k, ++ptr11, ++ptr22 )
         {
            //array[i][j] = (int32_t)strtol(ptr11, &ptr11, 10);
        //	 long val = strtol(ptr11, &ptr11, 10);
        //	 xil_printf("val-desc11= %d \n", val);
            *(baseaddr_p+i) = (int32_t)strtol(ptr11, &ptr11, 0);
        //    long val1 = strtol(ptr22, &ptr22, 10);
        //    xil_printf("val1-desc22= %d \n", val1);
            *(baseaddr_q+i) = (int32_t)strtol(ptr22, &ptr22, 0);

         }
         xil_printf("Distance %d \n \r", *(baseaddr_p+128));
         *(baseaddr_p+129) = 0x80000000;

      }
    }

    /* Close the files */
    f_close(&fsrc11);
    f_close(&fsrc22);
    f_close(&fdst);
  }


  exit(1);

}

